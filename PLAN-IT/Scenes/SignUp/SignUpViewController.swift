//
//  SignUpViewController.swift
//  PLAN-IT
//
//  Created by KiwiTech on 08/07/19.
//  Copyright (c) 2019 KiwiTech. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Nantes

enum SignUpFields: Int, CaseIterable {
    case firstName = 1000,
    lastName,
    yearOfBirth,
    email,
    password
}

protocol SignUpDisplayLogic: class {
    func signupCompleted(with data: UserData)
    func showAlert(for text: String)
    func validationFailed(with error: String)
    func show(error: String, for field: SignUp.Fields)
}

class SignUpViewController: BaseViewController, SignUpDisplayLogic {
    @IBOutlet weak var errorLabel: UILabel!
    @IBOutlet weak var firstNameField: CustomiseTextField!
    @IBOutlet weak var lastNameField: CustomiseTextField!
    @IBOutlet weak var yearBirthField: CustomiseTextField!
    @IBOutlet weak var emailField: CustomiseTextField!
    @IBOutlet weak var passwordField: CustomiseTextField!
    @IBOutlet weak var errorView: UIView!
    @IBOutlet weak var showHideBtn: UIButton!
    @IBOutlet weak var descLabel: UILabel!
    let picker = UIPickerView()
    var currentValue: String = ""
    var currentValueInt: Int = 0
    var pickerData = [String]()
    var userObj = UserData()
    @IBOutlet weak var termsPolicyLabel: NantesLabel!
    @IBOutlet weak var firstNameView: CustomiseView!
    @IBOutlet weak var lastNameView: CustomiseView!
    @IBOutlet weak var yearBirthView: CustomiseView!
    @IBOutlet weak var emailView: CustomiseView!
    @IBOutlet weak var passwordView: CustomiseView!
    var interactor: SignUpBusinessLogic?
    var router: (NSObjectProtocol & SignUpRoutingLogic & SignUpDataPassing)?
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = SignUpInteractor()
        let presenter = SignUpPresenter()
        let router = SignUpRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setHighlightedtext()
        initPicker()
        createToolbar()
        self.passwordField.isSecureTextEntry = false
        picker.delegate = self
        picker.dataSource = self
        descLabel.setLineSpacing(lineSpacing: 5.0, lineHeightMultiple: 0.0, alignment: .left)
    }
    func setHighlightedtext () {
        self.termsPolicyLabel.delegate = self
        let text = String.privacyPolicyText
        self.termsPolicyLabel.linkAttributes = [
            NSAttributedString.Key.foregroundColor: UIColor(name: .defaultColor),
            NSAttributedString.Key.font: UIFont(font: (name: UIFont.FontName.karla, varient: UIFont.FontVarient.bold), size: 15) ?? UIFont.systemFont(ofSize: 14.0)
        ]
        self.termsPolicyLabel.addLink(to: URL(string: .termsLink)!, withRange: (text as NSString).range(of: .terms))
        self.termsPolicyLabel.addLink(to: URL(string: .policyLink)!, withRange: (text as NSString).range(of: .policy))
    }
    // MARK: - presenter methods
    func signupCompleted(with data: UserData) {
        hideLoader()
        router?.showVerificationScreen(email: userObj.email)
    }
    func showAlert(for text: String) {
        hideLoader()
        AppUtils.showBanner(with: text)
    }
    func validationFailed(with error: String) {
        hideLoader()
    }
    @IBAction func yearBirthBtnAction(_ sender: UIButton) {
        yearBirthField.becomeFirstResponder()
    }
    @IBAction func signUpBtnAction(_ sender: Any) {
        self.view.endEditing(true)
        if isValid() {
            showLoader()
            interactor?.signUp(with: SignUp.Request.init(firstName: userObj.firstName, lastName: userObj.lastName, dob: userObj.dob, email: userObj.email, password: userObj.password))
        }
    }
    @IBAction func showHideBtnAction(_ sender: UIButton) {
        sender.isSelected = !sender.isSelected
        self.passwordField.isSecureTextEntry = sender.isSelected ? false : true
    }
    @IBAction func backBtnAction(_ sender: Any) {
        navigationController?.popViewController(animated: true)
    }
}
extension SignUpViewController: UITextFieldDelegate {
    func textFieldDidBeginEditing(_ textField: UITextField) {
        self.errorView.isHidden = true
        self.errorLabel.text = ""
        removeBorderColor()
        if let view = self.view.viewWithTag(textField.tag + .constantTag) {
            setFieldBorderColor(isError: false, view: view)
        }
        if let text = userObj.password {
            self.showHideBtn.isHidden = text.count > 0 ? false : true
        }
    }
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        let newString = ((textField.text ?? "") as NSString).replacingCharacters(in: range, with: string)
        if textField.textInputMode?.primaryLanguage == .emoji || !((textField.textInputMode?.primaryLanguage) != nil) {
            return false
        }
        guard string != " " else {
            return false
        }
        self.showHideBtn.isHidden = textField.tag == .passwordFieldTag ? false : true
        if textField == self.passwordField && !self.passwordField.isSecureTextEntry && showHideBtn.titleLabel?.text == .show || newString.isEmpty {
            self.passwordField.isSecureTextEntry = true
            self.showHideBtn.isHidden = newString.isEmpty ? true : false
        }
        if textField == self.firstNameField || textField == self.lastNameField {
            let regex = "[a-zA-Z]"
            if string.range(of: regex, options: .regularExpression, range: nil, locale: nil) != nil || string.isEmpty {
                return true
            } else {
                return false
            }
        }
        return true
    }
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        let nextTag = textField.tag + 1
        if let nextResponder = view.viewWithTag(nextTag) {
            nextResponder.becomeFirstResponder()
        } else {
            textField.resignFirstResponder()
        }
        return true
    }
    func textFieldDidEndEditing(_ textField: UITextField) {
        self.errorView.isHidden = true
        removeBorderColor()
        switch textField.tag {
        case .fieldTag:
            userObj.firstName = textField.text?.trimmingCharacters(in: .whitespacesAndNewlines)
        case .lastNameFieldTag:
            userObj.lastName = textField.text?.trimmingCharacters(in: .whitespacesAndNewlines)
        case .yearBirthFieldTag:
            userObj.dob = textField.text?.trimmingCharacters(in: .whitespacesAndNewlines)
        case .emailFieldTag:
            userObj.email = textField.text?.trimmingCharacters(in: .whitespacesAndNewlines)
        case .passwordFieldTag:
            userObj.password = textField.text?.trimmingCharacters(in: .whitespacesAndNewlines)
        default:
            break
        }
    }
}
extension SignUpViewController {
    func initPicker() {
        fetchYearsToDisplay()
        picker.delegate?.pickerView?(picker, didSelectRow: 0, inComponent: 0)
        self.yearBirthField.inputView = picker
        picker.backgroundColor = .white
    }
    func createToolbar() {
        let toolbar = UIToolbar()
        toolbar.sizeToFit()
        toolbar.tintColor = .black
        toolbar.backgroundColor = .white
        let doneButton = UIBarButtonItem(title: .done, style: .plain, target: self, action: #selector(startDonePicker))
        doneButton.setTitleTextAttributes([NSAttributedString.Key.font: UIFont(font: (name: UIFont.FontName.karla, varient: UIFont.FontVarient.bold), size: 12) ?? UIFont.systemFont(ofSize: 12.0), NSAttributedString.Key.foregroundColor: UIColor(name: .doneColor)], for: .normal)
        doneButton.setTitleTextAttributes([NSAttributedString.Key.font: UIFont(font: (name: UIFont.FontName.karla, varient: UIFont.FontVarient.bold), size: 12) ?? UIFont.systemFont(ofSize: 12.0), NSAttributedString.Key.foregroundColor: UIColor(name: .doneColor)], for: .selected)
        let spaceButton = UIBarButtonItem(barButtonSystemItem: UIBarButtonItem.SystemItem.flexibleSpace, target: nil, action: nil)
        let navTitle = UILabel.init(frame: CGRect.init(x: 0, y: 0, width: 50, height: toolbar.frame.size.height))
        navTitle.text = .select
        navTitle.font = UIFont(font: (name: UIFont.FontName.karla, varient: UIFont.FontVarient.regular), size: 19)
        navTitle.textColor = UIColor(name: .headingColor)
        let titleItem = UIBarButtonItem.init(customView: navTitle)
        toolbar.setItems([spaceButton, titleItem, spaceButton, doneButton], animated: false)
        self.yearBirthField.inputAccessoryView = toolbar
    }
    @objc func startDonePicker() {
        self.yearBirthField.text = pickerData[self.currentValueInt]
        self.view.endEditing(true)
    }
    func show(error: String, for field: SignUp.Fields) {
        switch field {
        case .username:
            break
        case .password:
            break
        }
    }
}
