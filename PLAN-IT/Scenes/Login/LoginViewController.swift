//
//  LoginViewController.swift
//  i-Mar
//
//  Created by KiwiTech on 01/07/19.
//  Copyright (c) 2019 KiwiTech. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData
import FirebaseAnalytics
protocol LoginDisplayLogic: class {
    func showAlertFor(text: String)
    func loginCompleted(data: UserData)
    func loginNotVerified()
    func validationFailed(with error: String)
}

class LoginViewController: BaseViewController, LoginDisplayLogic {
    @IBOutlet weak var passwordField: CustomiseTextField!
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var emailField: CustomiseTextField!
    @IBOutlet weak var errorLabel: UILabel!
    @IBOutlet weak var errorImgView: UIImageView!
    @IBOutlet weak var errorview: UIView!
    @IBOutlet weak var emailView: CustomiseView!
    @IBOutlet weak var passwordView: CustomiseView!
    @IBOutlet weak var logoTopConstraint: NSLayoutConstraint!
    @IBOutlet weak var createAccountLabel: UIButton!
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    var passwordValue = ""
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        scrollView.contentInsetAdjustmentBehavior = .never
        transparentNavigation()
        let controller = Controller(identifier: LoginViewController.navIdentifier, storyboard: .main)
        UserDefaults.standard.set(object: controller, for: .initialViewController)
        logoTopConstraint.priority = UIScreen.main.bounds.size.height <= 568 ? UILayoutPriority(rawValue: 999) : UILayoutPriority(rawValue: 1)
    }
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.emailField.text = ""
        self.passwordField.text = ""
        removeBorderColor()
        errorview.isHidden = true
    }
    func showAlertFor(text: String) {
        hideLoader()
        AppUtils.showBanner(with: text)
    }
    func validationFailed(with error: String) {
        hideLoader()
        errorview.isHidden = false
        errorLabel.text = error
    }
    func loginCompleted(data: UserData) {
        hideLoader()
        if !(data.id == AppStateManager.shared.user?.id) {
            guard let context = context else {
                return
            }
            removeData()
            let fetch = NSFetchRequest<NSFetchRequestResult>(entityName: "DBLesson")
            let request = NSBatchDeleteRequest(fetchRequest: fetch)
            _ = try? context.execute(request)
        }
        AppStateManager.shared.user = data
        AppStateManager.shared.handleOnboarding(data: data)
        NotificationHandler.shared.registerFCMToken(fcmToken: AppStateManager.shared.fcmToken ?? "")
        Analytics.logEvent(.login, parameters: [.userName: AppStateManager.shared.user?.fullName ?? "",
            .userId: AppStateManager.shared.user?.id ?? 0])
    }
    func removeData() {
        let request = NSFetchRequest<DBAssessments>(entityName: "DBAssessments")
        if let result = try? context?.fetch(request), result.count > 0 {
            let objectToDelete = result[0]
            context?.delete(objectToDelete)
            do {
                try context?.save()
            } catch {
                AppUtils.showBanner(with: "Failed saving!!!!")
            }
        }
    }
    func loginNotVerified() {
        guard let email = emailField.text else {return}
        router?.showVerificationScreen(email: email)
    }
    @IBAction func forgotPasswordBtnAction(_ sender: Any) {
        self.view.endEditing(true)
        let signupVC = AppUtils.viewController(with: ForgotViewController.identifier)
        navigationController?.pushViewController(signupVC, animated: true)
    }
    @IBAction func signInBtnAction(_ sender: Any) {
        self.view.endEditing(true)
        if isValid() {
            showLoader()
            interactor?.login(with: Login.Request(email: emailField.text?.trimmingCharacters(in: .whitespacesAndNewlines), password: passwordField.text?.trimmingCharacters(in: .whitespacesAndNewlines)))
        }
    }
    @IBAction func signUpBtnAction(_ sender: Any) {
        self.view.endEditing(true)
        let signupVC = AppUtils.viewController(with: SignUpViewController.identifier)
        navigationController?.pushViewController(signupVC, animated: true)
    }
}
extension LoginViewController: UITextFieldDelegate {
    func textFieldDidBeginEditing(_ textField: UITextField) {
        self.errorview.isHidden = true
        self.errorLabel.text = ""
        if textField.tag == .fieldTag {
            setFieldBorderColor(isError: false, view: emailView)
            passwordView.layer.borderWidth = 0
        } else {
            setFieldBorderColor(isError: false, view: passwordView)
            emailView.layer.borderWidth = 0
        }
    }
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        if textField.textInputMode?.primaryLanguage == .emoji || !((textField.textInputMode?.primaryLanguage) != nil) {
            return false
        }
        guard string != " " else {
            return false
        }
        if textField == self.passwordField {
            self.passwordField.isSecureTextEntry = true
        }
        return true
    }
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        if textField == emailField {
            passwordField.becomeFirstResponder()
        } else {
            textField.resignFirstResponder()
        }
        return true
    }
    func textFieldDidEndEditing(_ textField: UITextField) {
        removeBorderColor()
    }
}
extension LoginViewController {
    func setFieldBorderColor(isError: Bool, view: UIView) {
        view.layer.borderWidth = 1
        view.layer.borderColor = isError ? UIColor(name: .errorColor).cgColor : UIColor(name: .defaultColor).cgColor
    }
    func removeBorderColor() {
        emailView.layer.borderWidth = 0
        passwordView.layer.borderWidth = 0
    }
}
extension LoginViewController {
    func isValid() -> Bool {
        var isValid = false
        var isAnyFieldEmpty = false
        var isInvalidFormat = false
        if let email = emailField.text?.trimmingCharacters(in: .whitespacesAndNewlines), let password = passwordField.text?.trimmingCharacters(in: .whitespacesAndNewlines) {
            self.errorview.isHidden = false
            if email.isEmpty && password.isEmpty {
                errorLabel.text = .mandatoryFields
                setFieldBorderColor(isError: true, view: emailView)
                setFieldBorderColor(isError: true, view: passwordView)
            } else {
                if email.isEmpty {
                    setFieldBorderColor(isError: true, view: emailView)
                    isAnyFieldEmpty = true
                }
                if password.isEmpty {
                    setFieldBorderColor(isError: true, view: passwordView)
                    isAnyFieldEmpty = true
                }
                if email.count > 0 && !ValidationUtils.validateEmail(emailID: email) {
                    setFieldBorderColor(isError: true, view: emailView)
                    isInvalidFormat = true
                }
                if isAnyFieldEmpty || isInvalidFormat {
                    isValid = false
                    errorview.isHidden = false
                    errorLabel.text =  isAnyFieldEmpty ? .mandatoryFields : ( isInvalidFormat ? .invalidFormat : .passwordInvalid )
                } else {
                    isValid = true
                    errorview.isHidden = true
                }
            }
        }
        return isValid
    }
}
