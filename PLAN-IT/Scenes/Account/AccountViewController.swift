//
//  AccountViewController.swift
//  PLAN-IT
//
//  Created by KiwiTech on 07/08/19.
//  Copyright (c) 2019 KiwiTech. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import LinkKit
import StoreKit
import MessageUI
protocol AccountDisplayLogic: class {
    func showAlertFor(text: String)
    func deActivateLinkedAccountSuccess(detail: String?)
    func changePushStatusSuccess(pushStatus: PushStatus?)
    func tokenSend()
    func logout()
    func validateReferenceCode(data: UserData?)
}
class AccountViewController: BaseViewController {
    @IBOutlet private weak var userNameLabel: UILabel!
    @IBOutlet private weak var userEmailLabel: UILabel!
    @IBOutlet private weak var notificationDescLabel: UILabel!
    @IBOutlet private weak var subscriptionDetailsLabel: UILabel!
    @IBOutlet private weak var userNameInLatterLabel: UILabel!
    @IBOutlet private weak var restoreButton: UIButton!
    @IBOutlet private weak var changePasswordButton: UIButton!
    @IBOutlet private weak var signOutButton: UIButton!
    @IBOutlet private weak var howDoISubscribeButton: UIButton!
    @IBOutlet private weak var deActiveLinkedAccountButton: UIButton!
    @IBOutlet private weak var resetButton: UIButton!
    @IBOutlet private weak var emailNotificationButton: UIButton!
    @IBOutlet private weak var pushNotificationButton: UIButton!
    @IBOutlet weak var accountLinkLabel: UILabel!
    @IBOutlet weak var heightConstraintOfDeActivateButton: NSLayoutConstraint!
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var subscriptionLabel: UILabel!
    @IBOutlet weak var subscribeBtnLeadingConstraint: NSLayoutConstraint!
    @IBOutlet weak var toolTipImg: UIImageView!
    @IBOutlet weak var blurView: UIView!
    @IBOutlet weak var supportBtn: UIButton!
    @IBOutlet weak var referenceViewBtmConstraint: NSLayoutConstraint!
    @IBOutlet weak var referenceView: UIView!
    @IBOutlet weak var subscriptionView: UIView!
    @IBOutlet weak var subscriptionBtmConstraint: NSLayoutConstraint!
    var interactor: AccountBusinessLogic?
    var isForDeactivate = false
    var router: (NSObjectProtocol & AccountRoutingLogic & AccountDataPassing)?
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = AccountInteractor()
        let presenter = AccountPresenter()
        let router = AccountRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
    }
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        showSubscriptionReferenceView()
        if !checkConnectivity() {
            if Int(truncating: appDelegate?.product?.price ?? 0.0) > 0 {
                self.blurView.isHidden = true
                self.setupUI()
            } else {
                // show loader to restrict the user to select the other tabs
                self.showLoader()
                self.blurView.isHidden = false
                appDelegate?.helper.getProductInfo { (_, products) in
                    self.hideLoader()
                    if let product = products?.first {
                        appDelegate?.product = product
                    }
                    self.blurView.isHidden = true
                    self.setupUI()
                }
            }
        } else {
            self.blurView.isHidden = false
        }
    }
    func showSubscriptionReferenceView() {
        if AppStateManager.shared.user?.isSubscribed ?? false || !(AppStateManager.shared.user?.isPromoReference ?? false) {
            referenceViewBtmConstraint.constant = -referenceView.frame.size.height
            referenceView.isHidden = true
        } else {
            if AppStateManager.shared.user?.isPromoSubscribed ?? false {
                subscriptionBtmConstraint.constant = -subscriptionView.frame.size.height
                subscriptionView.isHidden = true
                referenceViewBtmConstraint.constant = -referenceView.frame.size.height
                referenceView.isHidden = true
            } else {
                subscriptionBtmConstraint.constant = 45
                subscriptionView.isHidden = false
                referenceViewBtmConstraint.constant = 45
                referenceView.isHidden = false
            }
        }
    }
    // MARK: - Setup UI Attributes
    private func setupUI() {
        self.setupUserInformation()
        self.setupUnderLineOnButtons()
        self.notificationDescLabel.setLineSpacing(alignment: .left, minimumLineHeight: 18)
        self.subscriptionDetailsLabel.setLineSpacing(alignment: .left, minimumLineHeight: 18)
        self.deActivateButtonState()
    }
    private func setupUnderLineOnButtons() {
        let boldFont = UIFont(font: (name: UIFont.FontName.karla, varient: UIFont.FontVarient.bold), size: 11)
        // Restore Attribute
        self.restoreButton.makeUnderLineText(
            font: boldFont,
            colorName: .defaultColor,
            text: String.restore
        )
        let regularFont = UIFont(font: (name: UIFont.FontName.karla, varient: UIFont.FontVarient.regular), size: 13)
        // DeActivateLinkedAccounts Attribute
        let deActivateButtonText: String = (AppStateManager.shared.user?.isAccount == true) ? .deActivateLinkedAccounts : ""
        self.deActiveLinkedAccountButton.makeUnderLineText(
            font: regularFont,
            colorName: .errorColor,
            text: deActivateButtonText
        )
        // Reset Attribute
        let resetButtonText: String = (AppStateManager.shared.user?.isAccount == true) ? .resetPin : .add
        self.resetButton.makeUnderLineText(
            font: boldFont,
            colorName: .defaultColor,
            text: resetButtonText
        )
        // HowDoICancelMySubscription Attribute
        self.howDoISubscribeButton.makeUnderLineText(
            font: regularFont,
            colorName: .defaultColor,
            text: AppStateManager.shared.user?.isSubscribed ?? true ? String.HowDoICancelMySubscription : String(format: String.purchaseSubscription, appDelegate?.product?.localizedPrice ?? "$9.99")
        )
    }
    private func deActivateButtonState() {
        self.heightConstraintOfDeActivateButton.constant = (AppStateManager.shared.user?.isAccount == true) ? 18.0 : 0
        self.deActiveLinkedAccountButton.isHidden = !(AppStateManager.shared.user?.isAccount == true)
    }
    // MARK: - set text Information
    private func setupUserInformation() {
        let userFullName = AppStateManager.shared.user?.fullName ?? ""
        self.userNameLabel.text = userFullName
        self.userEmailLabel.text = AppStateManager.shared.user?.email ?? ""
        let latterWord = userFullName
            .components(separatedBy: " ")
            .map { (String($0.first ?? Character("")))
                .capitalized
            }.joined()
        self.userNameInLatterLabel.text = latterWord
        self.emailNotificationButton.isSelected = AppStateManager.shared.user?.emailNotification ?? false
        self.pushNotificationButton.isSelected = AppStateManager.shared.user?.pushNotification ?? false
        if AppStateManager.shared.user?.isAccount == true {
            self.accountLinkLabel.text = .accountLinked
        } else {
            self.accountLinkLabel.text = .accounts
        }
        setSubscriptionText()
    }
    func setSubscriptionText() {
        if AppStateManager.shared.user?.isSubscribed ?? true {
            subscriptionLabel.text = .subscription
            let subscriptionExpiry = AppStateManager.shared.user?.subscriptionExpiry ?? ""
            let changeDateFormat = AppUtils.subscriptionDateFormat(date: subscriptionExpiry)
            let subscriptionPrice = appDelegate?.product?.localizedPrice ?? "$9.99"
            self.subscriptionDetailsLabel.text = String(format: .subscribedText, changeDateFormat, subscriptionPrice)
            subscribeBtnLeadingConstraint.constant = 42
            restoreButton.isHidden = false
            toolTipImg.isHidden = false
        } else {
            subscriptionLabel.text = .subscribeToUnlock
            self.subscriptionDetailsLabel.text = String.subscriptionUnlockText
            subscribeBtnLeadingConstraint.constant = 25
            restoreButton.isHidden = true
            toolTipImg.isHidden = true
        }
    }
    // MARK: - Change Push Status Api & Actions
    @IBAction func switchActions(_ sender: UIButton) {
        sender.isSelected = !sender.isSelected
        var postPushStatus = Account.ChangePushPostRequst()
        if sender == self.emailNotificationButton {
            //email
            postPushStatus.pushStatus?.emailNotification = sender.isSelected
        } else {
            //push
            postPushStatus.pushStatus?.pushNotification = sender.isSelected
        }
        if !checkConnectivity() {
            showLoader()
            self.interactor?.changePushStatus(postRequest: postPushStatus)
        }
    }
    // MARK: - Button Actions
    @IBAction func buttonActions(_ sender: UIButton) {
        switch sender {
        case self.signOutButton:
            showLogoutPopup()
        case self.howDoISubscribeButton:
            if AppStateManager.shared.user?.isSubscribed ?? true {
                self.router?.redirectToSubscriptionPopUp()
            } else {
                if appDelegate?.product == nil {
                    return
                }
                //subscribe user
                showLoader()
                appDelegate?.helper.buyProduct(product: appDelegate?.product ?? SKProduct()) { (success, text) in
                    self.hideLoader()
                    if success {
                        self.setupUI()
                        DispatchQueue.main.async {
                            self.showSubscriptionReferenceView()
                        }
                    } else {
                        AppUtils.showBanner(with: text)
                    }
                }
            }
        case self.changePasswordButton:
            self.router?.redirectToChangePassword()
        case self.deActiveLinkedAccountButton:
            if let controller = AppUtils.viewController(with: CustomPopUp.identifier, in: .main) as? CustomPopUp {
                controller.delegate = self
                controller.isForDeactivate = true
                self.isForDeactivate = true
                controller.view.backgroundColor = UIColor.black.withAlphaComponent(0.8)
                controller.modalPresentationStyle = .overFullScreen
                self.navigationController?.present(controller, animated: false, completion: nil)
            }
        case self.resetButton:
            if AppStateManager.shared.user?.isAccount == true {
                //Reset
                if let controller = AppUtils.viewController(with: EnterPasswordViewController.identifier, in: .main) as? EnterPasswordViewController {
                    controller.isFromLibrary = true
                    self.hidesBottomBarWhenPushed = true
                    self.navigationController?.pushViewController(controller, animated: true)
                    self.hidesBottomBarWhenPushed = false
                }
            } else {
                // Add Account
                self.addAccount()
            }
        case restoreButton:
            showLoader()
            appDelegate?.helper.restorePurchasedProducts(completionHandler: { (success, msg) in
                self.hideLoader()
                if success {
                    AppUtils.showBanner(with: "Subscription restored successfully!!!", type: .done)
                } else {
                    AppUtils.showBanner(with: msg)
                }
            })
        case supportBtn:
            supportBtnTapped()
        default:
            break
        }
    }
    @IBAction func referenceBtnAction(_ sender: Any) {
        if let controller = AppUtils.viewController(with: ReferencePopUp.identifier, in: .main) as? ReferencePopUp {
            controller.delegate = self
            controller.view.backgroundColor = UIColor.black.withAlphaComponent(0.8)
            controller.modalPresentationStyle = .overFullScreen
            self.navigationController?.present(controller, animated: false, completion: nil)
        }
    }
    func supportBtnTapped() {
        let mailComposeViewController = configuredMailComposeViewController()
        if MFMailComposeViewController.canSendMail() {
            self.hidesBottomBarWhenPushed = true
            self.present(mailComposeViewController, animated: true, completion: nil)
            self.hidesBottomBarWhenPushed = false
        } else {
            self.showSendMailErrorAlert()
        }
    }
    private func addAccount() {
        // With custom configuration
        let linkConfiguration = PLKConfiguration(key:
            plaidPublicKey, env: .production, product: [.auth, .transactions])
        let linkViewDelegate = self
        let linkViewController = PLKPlaidLinkViewController.init(configuration: linkConfiguration, delegate: linkViewDelegate)
        present(linkViewController, animated: true)
    }
    func logout() {
        hideLoader()
        AppStateManager.shared.logoutUser()
    }
    func showLogoutPopup() {
        if let controller = AppUtils.viewController(with: CustomPopUp.identifier, in: .main) as? CustomPopUp {
            controller.delegate = self
            controller.view.backgroundColor = UIColor.black.withAlphaComponent(0.8)
            controller.modalPresentationStyle = .overFullScreen
            self.navigationController?.present(controller, animated: false, completion: nil)
        }
    }
    func validateReferenceCode(data: UserData?) {
        hideLoader()
        self.dismiss(animated: true, completion: nil)
        if let value = data {
            AppStateManager.shared.user?.isPromoSubscribed = value.isPromoSubscribed
            AppStateManager.shared.user?.subscriptionExpiry = value.subscriptionExpiry
            DispatchQueue.main.async {
                if let controller = AppUtils.viewController(with: SubscriptionCompletionPopup.identifier, in: .tabbar) as? SubscriptionCompletionPopup {
                    controller.delegate = self
                    controller.view.backgroundColor = UIColor.black.withAlphaComponent(0.8)
                    controller.modalPresentationStyle = .overFullScreen
                    self.navigationController?.present(controller, animated: false, completion: nil)
                }
            }
        }
    }
}
extension AccountViewController: SubscriptionPopUpDelegate {
    func dismissSheet() {
        self.view.endEditing(true)
        DispatchQueue.main.async {
            self.showSubscriptionReferenceView()
        }
    }
}
extension AccountViewController: AccountDisplayLogic {
    func showAlertFor(text: String) {
        hideLoader()
        AppUtils.showBanner(with: text)
        self.view.endEditing(true)
    }
    func tokenSend() {
        hideLoader()
        if let controller = AppUtils.viewController(with: CreatePinViewController.identifier, in: .tabbar) as? CreatePinViewController {
            controller.isFromAccount = true
            self.hidesBottomBarWhenPushed = true
            self.navigationController?.pushViewController(controller, animated: true)
            self.hidesBottomBarWhenPushed = false
        }
    }
    func deActivateLinkedAccountSuccess(detail: String?) {
        hideLoader()
        self.isForDeactivate = false
        AppStateManager.shared.user?.isAccount = false
        self.setupUI()
        AppUtils.showBanner(with: detail ?? "", type: .done)
    }
    func changePushStatusSuccess(pushStatus: PushStatus?) {
        hideLoader()
        AppStateManager.shared.user?.emailNotification = pushStatus?.emailNotification
        AppStateManager.shared.user?.pushNotification = pushStatus?.pushNotification
    }
}
extension AccountViewController: PLKPlaidLinkViewDelegate {
    func linkViewController(_ linkViewController: PLKPlaidLinkViewController, didSucceedWithPublicToken event: String, metadata: [String: Any]?) {
        dismiss(animated: true) {
            // Handle success, e.g. by storing publicToken with your
            self.showLoader()
            self.interactor?.sendPlaidToken(request: AddAccount.Request(token: event))
        }
    }
    func linkViewController(_ linkViewController: PLKPlaidLinkViewController, didExitWithError error: Error?, metadata: [String: Any]?) {
        dismiss(animated: true) {
            self.hideLoader()
        }
    }
    func linkViewController(_ linkViewController: PLKPlaidLinkViewController, didHandleEvent event: String, metadata: [String: Any]?) {
        print(event)
    }
}
