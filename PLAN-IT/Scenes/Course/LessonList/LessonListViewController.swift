//
//  LessonListViewController.swift
//  PLAN-IT
//
//  Created by KiwiTech on 08/08/19.
//  Copyright (c) 2019 KiwiTech. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LessonListDisplayLogic: class {
    func fetchLesson(value: Course?, lesson: [Lesson]?)
    func showAlertFor(text: String)
    func fetchedLessonDetail(data: Lesson?)
    func refreshList(lessdonId: Int)
    func lessonRead(text: String)
}

class LessonListViewController: BaseViewController, LessonListDisplayLogic, BottomSheetChildDelegate {
    @IBOutlet weak var descView: UIView!
    @IBOutlet weak var heightConstraint: NSLayoutConstraint!
    @IBOutlet weak var courseNameLabel: UILabel!
    @IBOutlet weak var courseDescLabel: UILabel!
    @IBOutlet weak var lessonCountLabel: UILabel!
    @IBOutlet weak var imgView: UIImageView!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var scrollView: UIScrollView!
    var courseObj: Course?
    var lessons: [Lesson]?
    var index = Int()
    weak var bottomSheet: BottomSheetViewController?
    var interactor: LessonListBusinessLogic?
    var isCellSelected = false
    var router: (NSObjectProtocol & LessonListRoutingLogic & LessonListDataPassing)?
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = LessonListInteractor()
        let presenter = LessonListPresenter()
        let router = LessonListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        scrollView.contentInsetAdjustmentBehavior = .never
        courseDescLabel.setLineSpacing(lineSpacing: 5.0, lineHeightMultiple: 0.0, alignment: .left)
        interactor?.fetchLesson()
        if let isSubscribed = AppStateManager.shared.user?.isSubscribed, let isPromoSubscribed = AppStateManager.shared.user?.isPromoSubscribed, !isSubscribed && !isPromoSubscribed {
            (lessons?.count ?? 0) > 1 ? setBottomSheet() : nil
        }
    }
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.hidesBottomBarWhenPushed = true
    }
    func setBottomSheet() {
        if let controller = AppUtils.viewController(with: SubscriptionPopup.identifier, in: .tabbar) as? SubscriptionPopup {
            _ = controller.view //To load the objects from NIB
            controller.delegate = self
            let hgt = UIScreen.main.bounds.height - controller.heightConstraint.constant + (UIApplication.shared.keyWindow?.safeAreaInsets.bottom ?? 0)
            let min = hgt + 208
            bottomSheet = BottomSheetViewController.initialize(parentViewController: self, childViewController: controller, trackingScrollView: controller.scrollview, topViewAnimateDelegateObj: nil, maxOffsetOfSheet: hgt - 78, midOffsetOfSheet: hgt, minOffsetOfSheet: min, shouldShowOnMax: true)
        }
    }
    func fetchLesson(value: Course?, lesson: [Lesson]?) {
        courseObj = value
        lessons = lesson
        courseNameLabel.text = courseObj?.title
        courseDescLabel.text = courseObj?.description
        lessonCountLabel.text = (lesson?.count ?? 0) > 1 ? String(format: "%d LESSONS", lessons?.count ?? 0) :  String(format: "%d LESSON", lessons?.count ?? 0)
        imgView.sd_setImage(with: URL(string: (courseObj?.category?.imageUrl ?? ""))) { (image, _, _, _) in
            self.imgView.image = image
        }
        self.tableView.alpha = 0
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.25) {
            self.tableView.contentInset = UIEdgeInsets(top: self.descView.frame.size.height, left: 0, bottom: self.tableView.contentInset.bottom, right: 0)
            self.tableView.contentOffset = CGPoint.init(x: 0, y: -self.descView.frame.size.height)
            for (index, value) in self.lessons?.enumerated() ?? [].enumerated() where value.isCompleted ?? false && index < (self.lessons?.count ?? 0) - 1 {
                if AppStateManager.shared.user?.isSubscribed ?? true || AppStateManager.shared.user?.isPromoSubscribed ?? true {
                    let indexPath = IndexPath.init(row: index + 1, section: 0)
                    self.tableView.scrollToRow(at: indexPath, at: .top, animated: true)
                } else {
                    let indexPath = IndexPath.init(row: index, section: 0)
                    self.tableView.scrollToRow(at: indexPath, at: .top, animated: true)
                }
            }
            self.tableView.alpha = 1
        }
    }
    func fetchedLessonDetail(data: Lesson?) {
        hideLoader()
        interactor?.lessonRead(lessonId: data?.id ?? 0)
        if let controller = AppUtils.viewController(with: LessonDetailViewController.identifier, in: .tabbar) as? LessonDetailViewController {
            controller.router?.dataStore?.lessonObj = data
            controller.courseName = courseObj?.title
            controller.lessonId = index + 1
            if let lessonArray = lessons {
                for (index, value) in lessonArray.enumerated() where value.id == data?.id {
                    if index == lessonArray.count - 1 {
                        controller.router?.dataStore?.nextLessonId = nil
                    } else {
                        let obj = lessonArray[index + 1]
                        controller.router?.dataStore?.nextLessonId = obj.id
                    }
                }
            }
            _ = controller.view
            self.hidesBottomBarWhenPushed = true
            self.navigationController?.pushViewController(controller, animated: true)
        }
    }
    func showAlertFor(text: String) {
        hideLoader()
        AppUtils.showBanner(with: text)
    }
    @IBAction func backBtnAction(_ sender: Any) {
        self.hidesBottomBarWhenPushed = true
        self.navigationController?.popViewController(animated: true)
    }
    func refreshList(lessdonId: Int) {
        if let lessonArray = lessons {
            for (index, value) in lessonArray.enumerated() where value.id == lessdonId {
                var obj = lessons?[index]
                obj?.isCompleted = true
                lessons?[index] = obj ?? Lesson()
                if index < lessonArray.count - 1 {
                    var obj = lessons?[index + 1]
                    obj?.isPlaying = true
                    lessons?[index + 1] = obj ?? Lesson()
                }
            }
            DispatchQueue.main.async {
                self.tableView.reloadData()
            }
        }
    }
    func lessonRead(text: String) {
        print(text)
    }
}
extension LessonListViewController: DismissDelegate {
    func dismissSheet() {
        bottomSheet?.removeBottomSheet()
        tableView.reloadData()
    }
}
