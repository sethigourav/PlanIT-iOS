//
//  LessonFeedbackViewController.swift
//  PLAN-IT
//
//  Created by KiwiTech on 09/08/19.
//  Copyright (c) 2019 KiwiTech. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LessonFeedbackDisplayLogic: class {
    func showExperienceWith(categoryName: String?)
    func showAlertFor(text: String)
    func goBackToLessonList()
}

class LessonFeedbackViewController: BaseViewController, LessonFeedbackDisplayLogic {
    @IBOutlet weak var labelRateExperience: UILabel!
    @IBOutlet weak var buttonHappy: UIButton!
    @IBOutlet weak var buttonSad: UIButton!

    var interactor: LessonFeedbackBusinessLogic?
    var router: (NSObjectProtocol & LessonFeedbackRoutingLogic & LessonFeedbackDataPassing)?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = LessonFeedbackInteractor()
        let presenter = LessonFeedbackPresenter()
        let router = LessonFeedbackRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

  // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        labelRateExperience.setLineSpacing(lineSpacing: 7.0, lineHeightMultiple: 0.0, alignment: .center)
        interactor?.showExperienceOfCategory()
        let request = LessonFeedback.Request(lessonId: router?.dataStore?.lessonId, userID: AppStateManager.shared.user?.id, categoryName: router?.dataStore?.categoryName)
        UserDefaults.standard.set(object: request, for: .userFeedback)
    }
    // MARK: Do something
    func showExperienceWith(categoryName: String?) {
        if let categoryName = categoryName {
           labelRateExperience.text = "How would you rate your experience reading this article on \(categoryName)?"
        }
    }
    func resetButton() {
        buttonSad.isSelected = false
        buttonHappy.isSelected = false
    }
    @IBAction func positiveFeedbackButtonAction(_ sender: Any) {
        self.resetButton()
        if let button =  sender as? UIButton {
            button.isSelected = !button.isSelected
        }
        self.callSendFeedbackAPI(true)
    }
    @IBAction func negativeFeedbackButtonAction(_ sender: Any) {
        self.resetButton()

        if let button =  sender as? UIButton {
            button.isSelected = !button.isSelected
        }
        self.callSendFeedbackAPI(false)
    }
    func callSendFeedbackAPI(_ isLike: Bool) {
        showLoader()
        interactor?.sendFeedback(with: LessonFeedback.Request(lessonId: router?.dataStore?.lessonId, isLike: isLike))
    }
    func showAlertFor(text: String) {
        hideLoader()
        AppUtils.showBanner(with: text)
    }
    func goBackToLessonList() {
        hideLoader()
        var inNavigationStack = false
        if let arrViewControlers = self.navigationController?.viewControllers {
            for viewC in arrViewControlers {
                if viewC.isKind(of: LessonListViewController.self) {
                    inNavigationStack = true
                    let controller = viewC as? LessonListViewController
                    controller?.refreshList(lessdonId: router?.dataStore?.lessonId ?? 0)
                    self.navigationController?.popToViewController(controller ?? viewC, animated: true)
                    break
                }
            }
        }
        if !inNavigationStack {
            self.dismiss(animated: true, completion: nil)
        }
    }
}
