//
//  SearchCourseViewController.swift
//  PLAN-IT
//
//  Created by KiwiTech on 19/08/19.
//  Copyright (c) 2019 KiwiTech. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import IQKeyboardManagerSwift

protocol SearchCourseDisplayLogic: class {
    func fetchedSearchList(data: [Course]?)
    func fetchedlessonList(data: [Lesson]?)
    func showAlertFor(text: String)
}

class SearchCourseViewController: BaseViewController, SearchCourseDisplayLogic {
    var interactor: SearchCourseBusinessLogic?
    var router: (NSObjectProtocol & SearchCourseRoutingLogic & SearchCourseDataPassing)?
    var selectedIndex = Int()
    var previousIndex = Int()
    var isCourseSelected = false
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var noSearchResultView: UIView!
    @IBOutlet weak var textField: UITextField!

    var resultArray: [Course]?
    let pageSize: Int = 20
    var currentPage: Int = 0
    var lastPageLoaded: Bool = false

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

  // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = SearchCourseInteractor()
        let presenter = SearchCoursePresenter()
        let router = SearchCourseRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        IQKeyboardManager.shared.enableAutoToolbar = false
        self.tableView.tableFooterView = UIView()
    }
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        textField.becomeFirstResponder()
        self.hidesBottomBarWhenPushed = true
        self.isCourseSelected = false
    }
    @IBAction func cancelButtonAction(_ sender: Any) {
        self.navigationController?.popViewController(animated: true)
    }
    func fetchedlessonList(data: [Lesson]?) {
        hideLoader()
        if let controller = AppUtils.viewController(with: LessonListViewController.identifier, in: .tabbar) as? LessonListViewController {
            controller.router?.dataStore?.courseObj = resultArray?[selectedIndex]
            controller.router?.dataStore?.lessons = data
            self.hidesBottomBarWhenPushed = true
            navigationController?.pushViewController(controller, animated: true)
        }
    }
    func showAlertFor(text: String) {
        hideLoader()
        AppUtils.showBanner(with: text)
    }
}
extension SearchCourseViewController {
    func scrollViewDidEndDragging(_ scrollView: UIScrollView, willDecelerate decelerate: Bool) {
        let offsetY = scrollView.contentOffset.y
        let contentHeight = scrollView.contentSize.height
        if offsetY > contentHeight - scrollView.frame.size.height {
            self.loadMoreSearchList()
        }
    }
    func searchTextFromServer(_ searchText: String) {
        if !checkConnectivity() {
            if self.lastPageLoaded == true {
                return
            }
            var offset = self.currentPage
            if offset > 0 {
                offset = self.currentPage * pageSize
            }
            //showLoader()
            interactor?.searchCourse(with: SearchCourse.Request(query: searchText, limit: pageSize, offset: offset))
        }
    }
    func fetchedSearchList(data: [Course]?) {
        //hideLoader()
        if let courses = data {
             //self.resultArray = courses
            if resultArray != nil {
                if currentPage == 0 {
                    resultArray!.removeAll()
                }
                resultArray!.append(contentsOf: courses)
            } else {
                resultArray = [Course]()
                resultArray?.append(contentsOf: courses)
            }
            if courses.count < pageSize {
                self.lastPageLoaded = true
            }
            self.refreshTableView()
        }
    }
    func refreshTableView() {
        if let arr = resultArray, arr.count > 0 {
            noSearchResultView.isHidden = true
        } else {
            noSearchResultView.isHidden = false
        }
        tableView.reloadData()
    }
    func loadMoreSearchList() {
        self.currentPage += 1
        searchTextFromServer(textField.text ?? "")
    }
}
extension SearchCourseViewController: UITextFieldDelegate {
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        self.refreshServerConstant()
        var completeText: String = textField.text ?? ""
        completeText = (completeText as NSString).replacingCharacters(in: range, with: string)
        searchTextFromServer(completeText)
        return true
    }
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        return true
    }
    func textFieldShouldClear(_ textField: UITextField) -> Bool {
        self.refreshServerConstant()
        self.tableView.reloadData()
        return true
    }
    func refreshServerConstant() {
        self.currentPage = 0
        self.lastPageLoaded = false
        self.resultArray?.removeAll()
    }
}
