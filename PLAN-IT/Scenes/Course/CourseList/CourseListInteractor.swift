//
//  CourseListInteractor.swift
//  PLAN-IT
//
//  Created by KiwiTech on 02/08/19.
//  Copyright (c) 2019 KiwiTech. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CourseListBusinessLogic {
    func getCourseList()
    func getLessonList(courseId: Int)
    func checkNewCourse(courseId: Int)
}

protocol CourseListDataStore {
  //var name: String { get set }
}

class CourseListInteractor: CourseListBusinessLogic, CourseListDataStore {
  var presenter: CourseListPresentationLogic?
  var worker: CourseListWorker?
    func getCourseList() {
        if worker == nil {
            worker = CourseListWorker()
        }
        do {
            try worker?.getCourseList(completion: {[weak self] (response) in
                self?.presenter?.handle(response: response)
            })
        } catch let error {
            handle(exception: error)
        }
    }
    func getLessonList(courseId: Int) {
        if worker == nil {
            worker = CourseListWorker()
        }
        do {
            try worker?.getLessonlist(courseId: courseId, completion: {[weak self] (response) in
                self?.presenter?.handleLessonList(response: response)
            })
        } catch let error {
            handle(exception: error)
        }
    }
    func checkNewCourse(courseId: Int) {
        if worker == nil {
            worker = CourseListWorker()
        }
        do {
            try worker?.checkNewCourse(courseId: courseId, completion: {[weak self] (response) in
                self?.presenter?.handleNewCourse(response: response)
            })
        } catch let error {
            handle(exception: error)
        }
    }
    fileprivate func handle(exception: Error) {
        presenter?.showError(text: .somethingWentWrong + "\n" + .tryAgainInTime)
    }
}
