//
//  CourseListViewController.swift
//  PLAN-IT
//
//  Created by KiwiTech on 02/08/19.
//  Copyright (c) 2019 KiwiTech. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import AVKit
import FirebaseAnalytics
protocol CourseListDisplayLogic: class {
    func showAlertFor(text: String)
    func fetchedCourseList(data: [Course]?)
    func fetchedlessonList(data: [Lesson]?)
    func checkNewResponse(response: String)
}

class CourseListViewController: BaseViewController, CourseListDisplayLogic {
    @IBOutlet weak var descLabel: UILabel!
    @IBOutlet weak var topConstraint: NSLayoutConstraint!
    @IBOutlet weak var searchTopConstraint: NSLayoutConstraint!
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var courseCollectionView: UICollectionView!
    @IBOutlet weak var imgView: UIImageView!
    @IBOutlet weak var startCourseLabel: UILabel!
    @IBOutlet weak var searchBtn: UIButton!
    @IBOutlet weak var collectionBtmConstraint: NSLayoutConstraint!
    var index = Int()
    var interactor: CourseListBusinessLogic?
    var courseArray: [Course]?
    var router: (NSObjectProtocol & CourseListRoutingLogic & CourseListDataPassing)?
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = CourseListInteractor()
        let presenter = CourseListPresenter()
        let router = CourseListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        topConstraint.constant = DeviceType.IsIPhone5 ? 30 : 50
        searchTopConstraint.constant = DeviceType.IsIPhone5 ? 30 : (UIScreen.main.bounds.size.height >= 812 ? 65 : 45)
        collectionBtmConstraint.constant = DeviceType.IsIPhone5 ? 125 : (UIScreen.main.bounds.size.height >= 812 ? 160 : 140)
    }
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        if !checkConnectivity() {
            (courseArray?.count  ?? 0) > 0 ? nil : showLoader()
            interactor?.getCourseList()
        } else {
            searchBtn.isHidden = true
            descLabel.isHidden = true
            courseArray?.removeAll()
        }
        AppStateManager.shared.checkIfFeedbackPending(self)
    }
    func showAlertFor(text: String) {
        hideLoader()
        AppUtils.showBanner(with: text)
        managePlaceholder()
    }
    func fetchedCourseList(data: [Course]?) {
        hideLoader()
        if let courses = data, courses.count > 0 {
            courseArray = courses
            searchBtn.isHidden = false
            descLabel.isHidden = false
            descLabel.text = courses.count > 1 ? String(format: .startCoursesDesc, courses.count) : String(format: .startCourseDesc, courses.count)
            courseCollectionView.reloadData()
        } else {
            searchBtn.isHidden = true
            descLabel.isHidden = true
        }
        managePlaceholder()
    }
    func checkNewResponse(response: String) {
        print(response)
    }
    func fetchedlessonList(data: [Lesson]?) {
       hideLoader()
        DispatchQueue.main.async {
            if Int(truncating: appDelegate?.product?.price ?? 0.0) > 0 {
                self.moveToLessonList(lessonData: data)
            } else {
                appDelegate?.helper.getProductInfo { (_, products) in
                    if let product = products?.first {
                        appDelegate?.product = product
                    }
                    self.moveToLessonList(lessonData: data)
                }
            }
        }
    }
    func moveToLessonList(lessonData: [Lesson]?) {
        if let controller = AppUtils.viewController(with: LessonListViewController.identifier, in: .tabbar) as? LessonListViewController {
            if let courseName = lessonData?.first?.courseName {
                for course in courseArray ?? [] where course.title == courseName {
                    controller.router?.dataStore?.courseObj = course
                }
            } else {
                controller.router?.dataStore?.courseObj = courseArray?[index]
            }
            controller.router?.dataStore?.lessons = lessonData
            self.hidesBottomBarWhenPushed = true
            navigationController?.pushViewController(controller, animated: true)
            self.hidesBottomBarWhenPushed = false
        }
        Analytics.logEvent(.courseSelected, parameters: [.userName: AppStateManager.shared.user?.fullName ?? "" as NSObject,
                                                     .userId: AppStateManager.shared.user?.id ?? 0 as NSObject, .courseName: courseArray?[index].title ?? "" as NSObject, .courseId: courseArray?[index].id ?? "" as NSObject])
    }
    @IBAction func searchBtnAction(_ sender: Any) {
        if let controller = AppUtils.viewController(with: SearchCourseViewController.identifier) as? SearchCourseViewController {
            controller.hidesBottomBarWhenPushed = true
            self.navigationController?.pushViewController(controller, animated: true)
        }
    }
}
extension CourseListViewController {
    func managePlaceholder() {
        self.view.willRemoveSubview(view.viewWithTag(-1) ?? view)
        guard let courseArray = courseArray, courseArray.count > 0 else {
            let placeholderView = TransactionEmptyView()
            placeholderView.frame = self.view.frame
            placeholderView.imgView.image = UIImage(named: .course)
            placeholderView.descLabel.text = .courseEmptyText
            placeholderView.tag = -1
            startCourseLabel.isHidden = true
            descLabel.isHidden = true
            imgView.isHidden = true
            self.view.addSubview(placeholderView)
            self.view.bringSubviewToFront(placeholderView)
            return
        }
        startCourseLabel.isHidden = false
        descLabel.isHidden = false
        imgView.isHidden = false
        courseCollectionView.backgroundView = nil
        courseCollectionView.dataSource = self
        courseCollectionView.delegate = self
    }
}
