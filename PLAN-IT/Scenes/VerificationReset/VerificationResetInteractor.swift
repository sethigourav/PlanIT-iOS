//
//  VerificationResetInteractor.swift
//  PLAN-IT
//
//  Created by KiwiTech on 12/07/19.
//  Copyright (c) 2019 KiwiTech. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol VerificationResetBusinessLogic {
    func resendEmail(email: String?)
    func checkEmail(request: VerificationReset.ViewModel)
    func forgotPassword(for email: String?)
}

protocol VerificationResetDataStore {
    var modelObj: VerificationReset.ViewModel? { get set }
}

class VerificationResetInteractor: VerificationResetBusinessLogic, VerificationResetDataStore {
  var modelObj: VerificationReset.ViewModel?
  var presenter: VerificationResetPresentationLogic?
  var worker: VerificationResetWorker?
    func resendEmail(email: String?) {
        if worker == nil {
            worker = VerificationResetWorker()
        }
        do {
            try worker?.resendEmail(email: email, with: {[weak self] (response) in
                self?.presenter?.handle(response: response)
            })
        } catch let error {
            handle(exception: error)
        }
    }
    fileprivate func handle(exception: Error) {
        switch exception {
        case LoginErrors.invalidEmail:
            presenter?.showError(text: .incorrectEmail)
        default:
            presenter?.showError(text: .somethingWentWrong + "\n" + .tryAgainInTime)
        }
    }
    func checkEmail(request: VerificationReset.ViewModel) {
        let response = VerificationReset.Response(email: modelObj?.email, isFromSignUp: modelObj?.isFromSignUp)
        presenter?.showEmail(response: response)
    }
    func forgotPassword(for email: String?) {
           let worker = ForgotWorker()
           do {
            try worker.forgotPassword(for: email, completion: { [weak self] (response) in
                   self?.presenter?.handle(response: response)
               })
           } catch let exception {
               handle(exception: exception)
           }
       }
}
