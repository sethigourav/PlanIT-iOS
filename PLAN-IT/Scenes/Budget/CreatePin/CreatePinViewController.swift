//
//  CreatePinViewController.swift
//  PLAN-IT
//
//  Created by KiwiTech on 04/09/19.
//  Copyright (c) 2019 KiwiTech. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CreatePinDisplayLogic: class {
    func showAlertFor(text: String, code: Int)
    func createPin(data: String?)
}

class CreatePinViewController: BaseViewController, CreatePinDisplayLogic {
    var interactor: CreatePinBusinessLogic?
    var router: (NSObjectProtocol & CreatePinRoutingLogic & CreatePinDataPassing)?
    var pinArray = [String]()
    var isFromTransaction = false
    var isForResetPin = false
    var isToAddPin = false
    @IBOutlet weak var titleLabel: UILabel!
    @IBOutlet weak var forgotBtn: UIButton!
    @IBOutlet weak var backBtn: UIButton!
    @IBOutlet weak var containerViewTopConstraint: NSLayoutConstraint!
    @IBOutlet weak var createPinTopConstraint: NSLayoutConstraint!
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var descLabel: UILabel!
    @IBOutlet weak var errorView: UIView!
    @IBOutlet weak var separatorLabel: UILabel!
    @IBOutlet weak var pinOneField: UITextField!
    @IBOutlet weak var pinTwoField: UITextField!
    @IBOutlet weak var pinThreeField: UITextField!
    @IBOutlet weak var pinFourField: UITextField!
    @IBOutlet weak var pinTopConstraint: NSLayoutConstraint!
    var isFromAccount = false
    var apiCall = false
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = CreatePinInteractor()
        let presenter = CreatePinPresenter()
        let router = CreatePinRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        scrollView.contentInsetAdjustmentBehavior = .never
        descLabel.setLineSpacing(lineSpacing: 5.0, lineHeightMultiple: 0.0, alignment: .left)
        self.createPinTopConstraint.constant = DeviceType.IsIPhone5 ? (isFromTransaction || isForResetPin ? 80 : 35) :  DeviceType.IsIphone6Or7 ? (isFromTransaction || isForResetPin ? 90 : 45) : 97
        self.containerViewTopConstraint.constant = DeviceType.IsIPhone5 ? (isFromTransaction || isForResetPin ? 30 : 10) : 53
        self.pinTopConstraint.constant = DeviceType.IsIPhone5 ? 5 : DeviceType.IsIphone6Or7 ? 20 : 30
    }
    func setupUI() {
        if isFromTransaction {
            self.titleLabel.text = .enterPinTitle
            self.descLabel.text = .enterPinDesc
            self.backBtn.isHidden = false
            self.forgotBtn.isHidden = false
        } else {
            if isForResetPin {
                self.titleLabel.text = .resetPinTitle
                self.descLabel.text = .resetPinDesc
                self.backBtn.isHidden = false
                self.forgotBtn.isHidden = true
            } else {
                self.titleLabel.text = .createPinTitle
                self.descLabel.text = .createPinDesc
                self.backBtn.isHidden = true
                self.forgotBtn.isHidden = true
            }
        }
    }
    @IBAction func commonBtnAction(_ sender: UIButton) {
        errorView.isHidden = true
        separatorLabel.backgroundColor = UIColor(name: .headingColor)
        if sender.tag == 10 {
            if pinArray.count >= 1 {
                pinArray.removeAll()
            }
            pinFourField.text = ""
            pinThreeField.text = ""
            pinTwoField.text = ""
            pinOneField.text = ""
        } else {
            if pinArray.count < 4 {
                pinArray.append("\(sender.tag)")
            }
            if pinArray.count == 1 {
                pinOneField.text = pinArray[0]
            } else if pinArray.count == 2 {
                pinTwoField.text = pinArray[1]
            } else if pinArray.count == 3 {
                pinThreeField.text = pinArray[2]
            } else if pinArray.count == 4 {
                pinFourField.text = pinArray[3]
                //call api
                if !apiCall {
                    apiCall = true
                    let pin = pinArray.map {String($0)}.joined(separator: "")
                    if isFromTransaction {
                        self.interactor?.verifyPin(request: CreatePin.Request.init(pin: Int(pin)))
                    } else {
                        showLoader()
                        self.interactor?.createPin(request: CreatePin.Request.init(pin: Int(pin)))
                    }
                }
            }
        }
    }
    func showAlertFor(text: String, code: Int) {
        hideLoader()
        apiCall = false
        if code == 400 {
            errorView.isHidden = false
            separatorLabel.backgroundColor = UIColor(name: .errorColor)
        } else {
            AppUtils.showBanner(with: text)
        }
    }
    func createPin(data: String?) {
        hideLoader()
        if isFromTransaction || isForResetPin || isToAddPin {
            if isFromAccount {
                AppUtils.showBanner(with: data ?? "", type: .done)
                self.navigationController?.popToRootViewController(animated: true)
            } else {
                if let controller = AppUtils.viewController(with: AllTransactionsViewController.identifier, in: .tabbar) as? AllTransactionsViewController {
                    self.hidesBottomBarWhenPushed = true
                    self.navigationController?.pushViewController(controller, animated: true)
                }
            }
        } else {
            if isFromAccount {
                self.navigationController?.popToRootViewController(animated: true)
            } else {
                if let controller = AppUtils.viewController(with: BudgetSavingViewController.identifier, in: .tabbar) as? BudgetSavingViewController {
                    self.navigationController?.viewControllers = [controller]
                }
            }
        }
    }
    @IBAction func forgotBtnAction(_ sender: Any) {
        if let controller = AppUtils.viewController(with: EnterPasswordViewController.identifier, in: .main) as? EnterPasswordViewController {
            self.hidesBottomBarWhenPushed = true
            self.navigationController?.pushViewController(controller, animated: true)
        }
    }
    @IBAction func backBtnAction(_ sender: Any) {
        self.navigationController?.popViewController(animated: true)
    }
}
