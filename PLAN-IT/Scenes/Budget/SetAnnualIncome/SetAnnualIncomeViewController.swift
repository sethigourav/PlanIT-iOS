//
//  SetAnnualIncomeViewController.swift
//  PLAN-IT
//
//  Created by KiwiTech on 16/09/19.
//  Copyright (c) 2019 KiwiTech. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SetAnnualIncomeDisplayLogic: class {
    func dismissController(annualIncome: String?)
    func showAlertFor(text: String)
    func setAnnualIncome(data: UserData?)
}

class SetAnnualIncomeViewController: BaseViewController, SetAnnualIncomeDisplayLogic {
    var interactor: SetAnnualIncomeBusinessLogic?
    var router: (NSObjectProtocol & SetAnnualIncomeRoutingLogic & SetAnnualIncomeDataPassing)?
    weak var delegate: SetAnnualIncomeDisplayLogic?
    @IBOutlet weak var heightConstraint: NSLayoutConstraint!
    @IBOutlet weak var annualIncomeField: CustomiseTextField!
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var annualIncomeView: CustomiseView!
    var toolBar = UIToolbar(frame: CGRect(x: 0, y: 0, width: UIScreen.main.bounds.width, height: 44))
    var category: BudgetCategory?
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = SetAnnualIncomeInteractor()
        let presenter = SetAnnualIncomePresenter()
        let router = SetAnnualIncomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        self.annualIncomeField.delegate = self
        self.annualIncomeField.placeholder =  String(format: "Annual Income(%@)", AppUtils.getSymbol(forCurrencyCode: category?.isoCurrencyCode ?? "") ?? "$")
        self.annualIncomeField.text = AppStateManager.shared.user?.annualIncome != nil ? String(format: "%d", Int(AppStateManager.shared.user?.annualIncome ?? 0)) : ""
    }
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.annualIncomeField.becomeFirstResponder()
    }
    func showAlertFor(text: String) {
        hideLoader()
        AppUtils.showBanner(with: text)
    }
    func setAnnualIncome(data: UserData?) {
        hideLoader()
        AppStateManager.shared.user?.annualIncome = data?.annualIncome
        delegate?.dismissController(annualIncome: "\(calculateBudgetAccordingToCatgory())")
    }
    func dismissController(annualIncome: String?) {}
    @IBAction func setIncomeBtnAction(_ sender: Any) {
        if annualIncomeField.text?.isEmpty ?? true || annualIncomeField.text == "0" {
            setFieldBorderColor(isError: true, view: annualIncomeView)
        } else {
             showLoader()
             removeBorderColor()
             interactor?.setAnnualIncome(request: SetAnnualIncome.Request(annualIncome: Float(annualIncomeField.text?.trimmingCharacters(in: .whitespacesAndNewlines) ?? "") ?? 0.0))
        }
    }
    func calculateBudgetAccordingToCatgory() -> Int {
        var percentFactor = Float()
        switch category?.categoryName {
        case String.emergencyFund:
            percentFactor = 5
        case String.housing:
            percentFactor = 30
        case String.debt:
            percentFactor = 10
        case String.utilities:
            percentFactor = 10
        case String.groceries:
            percentFactor = 25
        case String.entertainment:
            percentFactor = 20
        default:
            percentFactor = 5
        }
        let annualIncome = (Float(annualIncomeField.text?.trimmingCharacters(in: .whitespacesAndNewlines) ?? "") ?? 0) / 12
        return Int((annualIncome * percentFactor / 100).rounded())
    }
}
extension SetAnnualIncomeViewController: UITextFieldDelegate {
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        if textField.textInputMode?.primaryLanguage == .emoji || !((textField.textInputMode?.primaryLanguage) != nil) {
            return false
        }
        guard string != " " else {
            return false
        }
        setFieldBorderColor(isError: false, view: annualIncomeView)
        return true
    }
    func textFieldShouldBeginEditing(_ textField: UITextField) -> Bool {
        setFieldBorderColor(isError: false, view: annualIncomeView)
        let button = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: nil, action: nil)
        let done = UIBarButtonItem(barButtonSystemItem: .done, target: self, action: #selector(doneTapped))
        done.tintColor = .black
        let navTitle = UILabel.init(frame: CGRect.init(x: 0, y: 0, width: 50, height: toolBar.frame.size.height))
        navTitle.text = .annualPlaceHolder
        navTitle.font = UIFont(font: (name: UIFont.FontName.karla, varient: UIFont.FontVarient.regular), size: 14)
        navTitle.textColor = .lightGray
        let titleItem = UIBarButtonItem.init(customView: navTitle)
        toolBar.items = [button, titleItem, button, done]
        textField.inputAccessoryView = toolBar
        return true
    }
    @objc func doneTapped() {
        if annualIncomeField.text?.isEmpty ?? true || annualIncomeField.text == "0" {
            setFieldBorderColor(isError: true, view: annualIncomeView)
        } else {
            showLoader()
            removeBorderColor()
            interactor?.setAnnualIncome(request: SetAnnualIncome.Request(annualIncome: Float(annualIncomeField.text?.trimmingCharacters(in: .whitespacesAndNewlines) ?? "") ?? 0.0))
        }
    }
}
extension SetAnnualIncomeViewController {
    func setFieldBorderColor(isError: Bool, view: UIView) {
        view.layer.borderWidth = 1
        view.layer.borderColor = isError ? UIColor(name: .errorColor).cgColor : UIColor(name: .defaultColor).cgColor
    }
    func removeBorderColor() {
        annualIncomeView.layer.borderWidth = 0
    }
}
