//
//  AllTransactionsViewController.swift
//  PLAN-IT
//
//  Created by KiwiTech on 30/08/19.
//  Copyright (c) 2019 KiwiTech. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AllTransactionsDisplayLogic: class {
    func displaySomething(viewModel: AllTransactions.ViewModel)
}

class AllTransactionsViewController: BaseViewController, AllTransactionsDisplayLogic {
    @IBOutlet weak var swipeMenu: SwipeMenuView!
    @IBOutlet weak var mainScrollView: UIScrollView!
    @IBOutlet weak var fromTransactionLabel: UILabel!
    @IBOutlet weak var toTransactionLabel: UILabel!
    @IBOutlet weak var setDateView: UIView!
    @IBOutlet weak var portfolioDescLabel: UILabel!
    let checkingController = AppUtils.viewController(with: TransactionListViewController.identifier, in: .tabbar)
    let savingController = AppUtils.viewController(with: TransactionListViewController.identifier, in: .tabbar)
    let portfolioController = AppUtils.viewController(with: TransactionListViewController.identifier, in: .tabbar)
    var controllerArray = [UIViewController]()
    let picker = UIDatePicker()
    var toolbar = UIToolbar()
    var selectedIndex = Int()
    private var datas: [String] = [.checking, .saving, .portfolio]
    var dataCount: Int = 3
    var toDate: String?
    var fromDate: String?
    var startDate: String?
    var endDate: String?
    var interactor: AllTransactionsBusinessLogic?
    var router: (NSObjectProtocol & AllTransactionsRoutingLogic & AllTransactionsDataPassing)?
    var isFromDatePicker = false
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = AllTransactionsInteractor()
        let presenter = AllTransactionsPresenter()
        let router = AllTransactionsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        controllerArray = [checkingController, savingController, portfolioController]
        let selectedDate = AppUtils.fetchDateStr(fromDate: Date())
        self.toDate = selectedDate
        self.endDate = self.toDate
        toTransactionLabel.text = self.toDate
        var dateComponents = DateComponents()
        dateComponents.month = -1
        let minDate = Calendar.current.date(byAdding: dateComponents, to: Date()) ?? Date()
        let selectedFromDate = AppUtils.fetchDateStr(fromDate: minDate)
        self.fromDate = selectedFromDate
        self.startDate = self.fromDate
        fromTransactionLabel.text = self.fromDate
        mainScrollView.contentInsetAdjustmentBehavior = .never
        initPicker()
        createToolbar()
        swipeMenu.delegate = self
        swipeMenu.dataSource = self
        let options: SwipeMenuViewOptions = .init()
        self.swipeMenu.reloadData(options: options)
    }
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        toolbar.removeFromSuperview()
        picker.removeFromSuperview()
    }
    func displaySomething(viewModel: AllTransactions.ViewModel) {
    }
    @IBAction func backBtnAction(_ sender: Any) {
        self.navigationController?.popToRootViewController(animated: true)
    }
    @IBAction func fromtransactionBtnAction(_ sender: UIButton) {
        let fromDate = AppUtils.fetchDate(fromStr: self.startDate ?? "")
        picker.setDate(fromDate, animated: true)
        setUpPicker(tag: sender.tag)
    }
    @IBAction func toTransactionBtnAction(_ sender: UIButton) {
        let toDate = AppUtils.fetchDate(fromStr: self.endDate ?? "")
        picker.setDate(toDate, animated: true)
        setUpPicker(tag: sender.tag)
    }
    func setUpPicker(tag: Int) {
        picker.tag = tag
        self.view.addSubview(picker)
        self.view.addSubview(toolbar)
    }
}
extension AllTransactionsViewController: SwipeMenuViewDataSource, SwipeMenuViewDelegate {
    // MARK: - SwipeMenuViewDelegate
    func swipeMenuView(_ swipeMenuView: SwipeMenuView, viewWillSetupAt currentIndex: Int) {
        print("will setup SwipeMenuView")
    }
    func swipeMenuView(_ swipeMenuView: SwipeMenuView, viewDidSetupAt currentIndex: Int) {
        print("did setup SwipeMenuView")
    }
    func swipeMenuView(_ swipeMenuView: SwipeMenuView, willChangeIndexFrom fromIndex: Int, to toIndex: Int) {
        print("will change from section\(fromIndex + 1)  to section\(toIndex + 1)")
        self.selectedIndex = toIndex
        self.setDateView.isHidden = toIndex == 2 ? true : false
        self.portfolioDescLabel.isHidden = toIndex == 2 ? false : true
    }
    func swipeMenuView(_ swipeMenuView: SwipeMenuView, didChangeIndexFrom fromIndex: Int, to toIndex: Int) {
        print("did change from section\(fromIndex + 1)  to section\(toIndex + 1)")
    }
    func numberOfPages(in swipeMenuView: SwipeMenuView) -> Int {
        return dataCount
    }
    func swipeMenuView(_ swipeMenuView: SwipeMenuView, titleForPageAt index: Int) -> String {
        return datas[index]
    }
    func swipeMenuView(_ swipeMenuView: SwipeMenuView, viewControllerForPageAt index: Int) -> UIViewController {
        swipeMenuView.jump(to: selectedIndex, animated: false)
        let controller = controllerArray[index] as? TransactionListViewController
        let catId = index + 1
        controller?.titleStr = datas[index]
        let fromDate: String = AppUtils.dateConversion(strDate: self.startDate ?? "")
        let toDate: String = AppUtils.dateConversion(strDate: self.endDate ?? "")
        controller?.callTransactionListApi(request: TransactionList.Request.init(categoryId: catId, startDate: fromDate, endDate: toDate, isFromDatePicker: isFromDatePicker))
        return controllerArray[index]
    }
}
