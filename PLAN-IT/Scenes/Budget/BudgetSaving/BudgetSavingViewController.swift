//
//  BudgetSavingViewController.swift
//  PLAN-IT
//
//  Created by KiwiTech on 29/08/19.
//  Copyright (c) 2019 KiwiTech. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Charts
protocol BudgetSavingDisplayLogic: class {
    func showAlertFor(text: String)
    func fetchBudgetCategory(data: [BudgetCategory]?)
    func fetchBudgetCategoryDetail(data: String?)
}

class BudgetSavingViewController: BaseViewController, BudgetSavingDisplayLogic {
    @IBOutlet weak var descLabel: UILabel!
    @IBOutlet weak var allTransactionBtn: CustomiseButton!
    @IBOutlet weak var dateLabel: UILabel!
    @IBOutlet weak var barChartView: BarChartView!
    @IBOutlet weak var collectionView: UICollectionView!
    @IBOutlet weak var lastMonthTransLabel: UILabel!
    @IBOutlet weak var heightConstraint: NSLayoutConstraint!
    @IBOutlet weak var graphHeight: NSLayoutConstraint!
    @IBOutlet weak var lastTransactionView: UIView!
    var interactor: BudgetSavingBusinessLogic?
    var router: (NSObjectProtocol & BudgetSavingRoutingLogic & BudgetSavingDataPassing)?
    var index: Int?
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = BudgetSavingInteractor()
        let presenter = BudgetSavingPresenter()
        let router = BudgetSavingRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setUpBarChart()
        self.heightConstraint.priority = UILayoutPriority(rawValue: (DeviceType.ISIPHONEXR ? 999 :  1))
        self.graphHeight.priority = UILayoutPriority(rawValue: (DeviceType.ISIPHONEXR ? 1 : 999))
        self.allTransactionBtn.layer.borderWidth = 1
        self.allTransactionBtn.layer.borderColor = UIColor(name: .headingColor).cgColor
        self.dateLabel.text = AppUtils.currentMonthYear()
        descLabel.setLineSpacing(lineSpacing: 5.0, lineHeightMultiple: 0.0, alignment: .left)
        var dateComponents = DateComponents()
        dateComponents.month = -1
        let minDate = Calendar.current.date(byAdding: dateComponents, to: Date()) ?? Date()
        let dateFormatter: DateFormatter = DateFormatter()
        dateFormatter.dateFormat = "MMMM"
        lastMonthTransLabel.text = String(format: .lastMonthTrans, dateFormatter.string(from: minDate))
    }
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        if !checkConnectivity() {
            (AppStateManager.shared.budgetCategoryArray?.count ?? 0) > 0 ? nil : showLoader()
            interactor?.fetchBudgetCategory()
        } else {
            AppStateManager.shared.budgetCategoryArray?.removeAll()
        }
    }
    @IBAction func alltransactionsBtnAction(_ sender: Any) {
        if let controller = AppUtils.viewController(with: CreatePinViewController.identifier, in: .tabbar) as? CreatePinViewController {
            if AppStateManager.shared.user?.isPinAdded ?? true {
                controller.isFromTransaction = true
            } else {
                controller.isToAddPin = true
            }
            self.hidesBottomBarWhenPushed = true
            self.navigationController?.pushViewController(controller, animated: true)
            self.hidesBottomBarWhenPushed = false
        }
    }
    func showAlertFor(text: String) {
        hideLoader()
        AppUtils.showBanner(with: text)
        self.collectionView.isUserInteractionEnabled = true
    }
    func fetchBudgetCategory(data: [BudgetCategory]?) {
        hideLoader()
        if let data = data {
            AppStateManager.shared.budgetCategoryArray = data
            setUpBarChart()
            self.collectionView.reloadData()
        }
    }
    func fetchBudgetCategoryDetail(data: String?) {
        hideLoader()
        self.collectionView.isUserInteractionEnabled = true
        let budgetCategory = AppStateManager.shared.budgetCategoryArray?[self.index ?? 0]
        let progress = (budgetCategory?.setBudget ?? 0) > 0 ? (budgetCategory?.spend ?? 0) / (budgetCategory?.setBudget ?? 0) : 0
        if (progress * 100) > 100 {
            if let controller = AppUtils.viewController(with: LessonDetailViewController.identifier, in: .tabbar) as? LessonDetailViewController {
                let progress = (budgetCategory?.setBudget ?? 0) > 0 ? (budgetCategory?.spend ?? 0) / (budgetCategory?.setBudget ?? 0) : 0
                controller.overSpentDescription = data
                controller.overSpentPercent = progress * 100
                controller.budgetCategory = budgetCategory
                _ = controller.view
                self.hidesBottomBarWhenPushed = true
                self.navigationController?.pushViewController(controller, animated: true)
                self.hidesBottomBarWhenPushed = false
            }
        } else {
            if let controller = AppUtils.viewController(with: SetBudgetViewController.identifier, in: .tabbar) as? SetBudgetViewController {
                let budgetCategory = AppStateManager.shared.budgetCategoryArray?[self.index ?? 0]
                controller.router?.dataStore?.description = data
                controller.router?.dataStore?.category = budgetCategory
                _ = controller.view
                self.hidesBottomBarWhenPushed = true
                self.navigationController?.pushViewController(controller, animated: true)
                self.hidesBottomBarWhenPushed = false
            }
        }
    }
}
