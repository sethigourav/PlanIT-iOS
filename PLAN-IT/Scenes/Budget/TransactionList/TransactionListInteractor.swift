//
//  TransactionListInteractor.swift
//  PLAN-IT
//
//  Created by KiwiTech on 03/09/19.
//  Copyright (c) 2019 KiwiTech. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TransactionListBusinessLogic {
    func fetchTransaction(request: TransactionList.Request)
    func fetchPortfolioTransaction(request: TransactionList.Request)
}

protocol TransactionListDataStore {
    var request: TransactionList.Request? { get set }
}

class TransactionListInteractor: TransactionListBusinessLogic, TransactionListDataStore {
    var request: TransactionList.Request?
    var presenter: TransactionListPresentationLogic?
    var worker: TransactionListWorker?
    var currentTransactionIds: [Int] = []
    var currentPotfolioIds: [Int] = []
    // MARK: Do something
    func fetchTransaction(request: TransactionList.Request) {
        if worker == nil {
            worker = TransactionListWorker()
        }
        if let catId = request.categoryId, currentTransactionIds.contains(catId) {
            return
        }
        currentTransactionIds += [(request.categoryId ?? 0)]
        if currentTransactionIds.contains(3) {
            return
        }
        do {
            try worker?.fetchTransaction(request: request, completion: {[weak self] (response) in
                if let index = self?.currentTransactionIds.firstIndex(of: request.categoryId ?? 0) {
                    self?.currentTransactionIds.remove(at: index)
                }
                self?.presenter?.handle(response: response)
            })
        } catch let error {
            if let index = currentTransactionIds.firstIndex(of: request.categoryId ?? 0) {
                currentTransactionIds.remove(at: index)
            }
            handle(exception: error)
        }
    }
    func fetchPortfolioTransaction(request: TransactionList.Request) {
        if worker == nil {
            worker = TransactionListWorker()
        }
        if let catId = request.categoryId, currentPotfolioIds.contains(catId) {
            return
        }
        currentPotfolioIds += [(request.categoryId ?? 0)]
        do {
            try worker?.fetchPortfolioTransaction(request: request, completion: {[weak self] (response) in
                if let index = self?.currentPotfolioIds.firstIndex(of: request.categoryId ?? 0) {
                    self?.currentPotfolioIds.remove(at: index)
                }
                self?.presenter?.handlePortfolioTransaction(response: response)
            })
        } catch let error {
            if let index = self.currentPotfolioIds.firstIndex(of: request.categoryId ?? 0) {
                self.currentPotfolioIds.remove(at: index)
            }
            handle(exception: error)
        }
    }
    fileprivate func handle(exception: Error) {
        presenter?.showError(text: .somethingWentWrong + "\n" + .tryAgainInTime)
    }
}
