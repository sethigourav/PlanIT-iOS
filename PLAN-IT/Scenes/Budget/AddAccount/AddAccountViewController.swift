//
//  AddAccountViewController.swift
//  PLAN-IT
//
//  Created by KiwiTech on 28/08/19.
//  Copyright (c) 2019 KiwiTech. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import LinkKit
protocol AddAccountDisplayLogic: class {
    func showAlertFor(text: String)
    func tokenSend()
}

class AddAccountViewController: BaseViewController, AddAccountDisplayLogic {
    @IBOutlet weak var descLabel: UILabel!
    @IBOutlet weak var dateLabel: UILabel!
    var interactor: AddAccountBusinessLogic?
    var router: (NSObjectProtocol & AddAccountRoutingLogic & AddAccountDataPassing)?
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = AddAccountInteractor()
        let presenter = AddAccountPresenter()
        let router = AddAccountRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        dateLabel.text = AppUtils.currentMonthYear()
        descLabel.setLineSpacing(lineSpacing: 5.0, lineHeightMultiple: 0.0, alignment: .left)
    }
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
    }
    func displaySomething(viewModel: AddAccount.ViewModel) {
    }
    @IBAction func addAccountBtnAction(_ sender: Any) {
        // With custom configuration
        let linkConfiguration = PLKConfiguration(key:
            plaidPublicKey, env: .production, product: [.auth, .transactions])
        let linkViewDelegate = self
        let linkViewController = PLKPlaidLinkViewController.init(configuration: linkConfiguration, delegate: linkViewDelegate)
        present(linkViewController, animated: true)
    }
    func showAlertFor(text: String) {
        hideLoader()
        AppUtils.showBanner(with: text)
    }
    func tokenSend() {
        hideLoader()
        if let controller = AppUtils.viewController(with: CreatePinViewController.identifier, in: .tabbar) as? CreatePinViewController {
            self.hidesBottomBarWhenPushed = true
            self.navigationController?.pushViewController(controller, animated: true)
            self.hidesBottomBarWhenPushed = false
        }
    }
}
extension AddAccountViewController: PLKPlaidLinkViewDelegate {
    func linkViewController(_ linkViewController: PLKPlaidLinkViewController, didSucceedWithPublicToken event: String, metadata: [String: Any]?) {
        dismiss(animated: true) {
            // Handle success, e.g. by storing publicToken with your
            self.showLoader()
            self.interactor?.sendPlaidToken(request: AddAccount.Request(token: event))
        }
    }
    func linkViewController(_ linkViewController: PLKPlaidLinkViewController, didExitWithError error: Error?, metadata: [String: Any]?) {
        dismiss(animated: true) {
            self.hideLoader()
        }
    }
    func linkViewController(_ linkViewController: PLKPlaidLinkViewController, didHandleEvent event: String, metadata: [String: Any]?) {
       print(event)
    }
}
