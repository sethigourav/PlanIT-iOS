//
//  LaunchViewController.swift
//  PLAN-IT
//
//  Created by KiwiTech on 29/08/19.
//  Copyright (c) 2019 KiwiTech. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import StoreKit
import CoreData
protocol LaunchDisplayLogic: class {
    func showAlertFor(text: String)
    func fetchUserData(data: UserData?)
}

class LaunchViewController: BaseViewController, LaunchDisplayLogic {
    var interactor: LaunchBusinessLogic?
    var router: (NSObjectProtocol & LaunchRoutingLogic & LaunchDataPassing)?
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = LaunchInteractor()
        let presenter = LaunchPresenter()
        let router = LaunchRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        callApi()
        updateData()
    }
    func callApi() {
        if !(AppUtils.reachablityManager?.isReachable ?? true) {
            if self.isDataSavedToLibrary() {
                if AppStateManager.shared.hasLoggedIn {
                    self.showTabbar()
                } else {
                    callCustomPopup(isError: false, errorText: nil)
                }
            } else {
              callCustomPopup(isError: false, errorText: nil)
            }
        } else {
            if !AppStateManager.shared.hasLoggedIn {
               DispatchQueue.main.async {
                    AppStateManager.shared.changeRootView(to: AppStateManager.shared.rootViewController())
               }
            } else {
                self.interactor?.getUserData()
            }
            
            appDelegate?.helper.getProductInfo { (_, products) in
                if let product = products?.first {
                    appDelegate?.product = product
                }
            }
        }
    }
    func callCustomPopup(isError: Bool, errorText: String?) {
        DispatchQueue.main.async {
            if let controller = AppUtils.viewController(with: CustomPopUp.identifier, in: .main) as? CustomPopUp {
                controller.delegate = self
                controller.isForRetry = isError ? false : true
                controller.isForError = isError
                controller.errorText = errorText
                controller.view.backgroundColor = UIColor.black.withAlphaComponent(0.8)
                controller.modalPresentationStyle = .overFullScreen
                self.navigationController?.present(controller, animated: false, completion: nil)
            }
        }
    }
    func showTabbar() {
        if let controller = AppUtils.viewController(with: PlanItTabbarController.identifier, in: .tabbar) as? PlanItTabbarController {
            controller.selectedIndex = 2
            appDelegate?.window?.rootViewController = controller
        }
    }
    func showAlertFor(text: String) {
        callCustomPopup(isError: true, errorText: text)
    }
    func fetchUserData(data: UserData?) {
        AppStateManager.shared.user?.annualIncome = data?.annualIncome
        AppStateManager.shared.user?.isAccount = data?.isAccount
        AppStateManager.shared.user?.isPinAdded = data?.isPinAdded
        AppStateManager.shared.user?.isSubscribed = data?.isSubscribed
        AppStateManager.shared.user?.isPromoSubscribed = data?.isPromoSubscribed
        AppStateManager.shared.user?.isPromoReference = data?.isPromoReference
        AppStateManager.shared.handleOnboarding(data: data ?? UserData())
        if let isSubscribed = AppStateManager.shared.user?.isSubscribed {
            if isSubscribed && AppStateManager.shared.hasLoggedIn {
                appDelegate?.helper.deliverPurchaseNotificationFor(identifier: appDelegate?.product?.productIdentifier)
            }
        }
    }
    func updateData() {
        let request = NSFetchRequest<DBLessonVideo>(entityName: "DBLessonVideo")
        request.predicate = NSPredicate(format: "videoStatus == %@", VideoDownloadStatus.downloading.rawValue )
        if let result = try? context?.fetch(request), result.count > 0 {
            for objectUpdate in result {
                objectUpdate.videoStatus = VideoDownloadStatus.failure.rawValue
            }
            do {
                try context?.save()
            } catch {
                AppUtils.showBanner(with: "Failed saving!!!!")
            }
        }
    }
    func isDataSavedToLibrary() -> Bool {
        let request = NSFetchRequest<DBLesson>(entityName: "DBLesson")
        if let result = try? context?.fetch(request), result.count > 0 {
            return result.count > 0 ? true : false
        }
        return false
    }
}
extension LaunchViewController: CustomPopUpDelegate {
    func dismissControllerToProceed() {
       self.callApi()
    }
}
