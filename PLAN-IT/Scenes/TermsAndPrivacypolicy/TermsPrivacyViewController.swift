//
//  TermsPrivacyViewController.swift
//  PLAN-IT
//
//  Created by KiwiTech on 07/08/19.
//  Copyright (c) 2019 KiwiTech. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import WebKit
protocol TermsPrivacyDisplayLogic: class {
    func showAlertFor(text: String)
    func fetchedUrls(data: [TermsPolicyUrl]?)
}

class TermsPrivacyViewController: BaseViewController, TermsPrivacyDisplayLogic {
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var webView: WKWebView!
    var interactor: TermsPrivacyBusinessLogic?
    var router: (NSObjectProtocol & TermsPrivacyRoutingLogic & TermsPrivacyDataPassing)?
    var isFromTerms = false
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = TermsPrivacyInteractor()
        let presenter = TermsPrivacyPresenter()
        let router = TermsPrivacyRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    override var preferredStatusBarStyle: UIStatusBarStyle {
        return .lightContent
    }
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        webView.scrollView.delegate = self
        scrollView.contentInsetAdjustmentBehavior = .never
        webView.scrollView.contentInsetAdjustmentBehavior = .never
        showLoader()
        interactor?.getUrls()
    }
    func showAlertFor(text: String) {
        hideLoader()
        AppUtils.showBanner(with: text)
    }
    func fetchedUrls(data: [TermsPolicyUrl]?) {
        if let url = data?.first {
            if let url = isFromTerms ? URL(string: url.termsAndCondUrl ?? "")  : URL(string: url.policyUrl ?? "") {
                webView.navigationDelegate = self
                webView.scrollView.contentInset = UIEdgeInsets(top: webView.scrollView.contentInset.top + 80, left: 0, bottom: webView.scrollView.contentInset.bottom, right: 0)
                for subviews in webView.subviews {
                    subviews.backgroundColor = UIColor(name: .staticBgColor)
                }
                webView.load(URLRequest(url: url))
            }
        }
    }
    @IBAction func backBtnAction(_ sender: Any) {
        self.navigationController?.popViewController(animated: true)
    }
}
extension TermsPrivacyViewController: WKNavigationDelegate {
    func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {
        hideLoader()
    }
}
extension TermsPrivacyViewController: UIScrollViewDelegate {
    func scrollViewWillBeginZooming(_ scrollView: UIScrollView, with view: UIView?) {
        scrollView.pinchGestureRecognizer?.isEnabled = false
    }
}
