//
//  AssessmentViewController.swift
//  PLAN-IT
//
//  Created by KiwiTech on 19/07/19.
//  Copyright (c) 2019 KiwiTech. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SDWebImage
import CoreData
protocol AssessmentDisplayLogic: class {
    func showAlertFor(text: String)
    func scoreSend(data: UserData)
    func getAssessmentQuestions(value: [Category]?)
}

class AssessmentViewController: BaseViewController, AssessmentDisplayLogic {
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var categoryNumberLabel: UILabel!
    @IBOutlet weak var categoryNameLabel: UILabel!
    @IBOutlet weak var categoryImgView: UIImageView!
    @IBOutlet weak var questionLabel: UILabel!
    @IBOutlet weak var collectionView: UICollectionView!
    @IBOutlet weak var colectionViewHeightConstraint: NSLayoutConstraint!
    @IBOutlet weak var scrollViewLeadingConstraint: NSLayoutConstraint!
    @IBOutlet weak var scrollViewTrailingConstraint: NSLayoutConstraint!
    @IBOutlet weak var prgView: UIProgressView!
    @IBOutlet weak var prgLabel: UILabel!
    var questionIndex = IndexPath.init(item: 0, section: 0)
    var categoryIndex = 0
    var assessments: [Category]?
    var isRightSwipe = Bool()
    var scoreArray = [Int]()
    var interactor: AssessmentBusinessLogic?
    var router: (NSObjectProtocol & AssessmentRoutingLogic & AssessmentDataPassing)?
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = AssessmentInteractor()
        let presenter = AssessmentPresenter()
        let router = AssessmentRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        prgView.transform = prgView.transform.scaledBy(x: 1, y: 2)
        prgView.layer.cornerRadius = prgView.frame.size.height / 2
        prgView.clipsToBounds = true
        interactor?.getAssessmentQuestions()
        updateUI()
    }
    func updateUI () {
        self.prgView.setProgress( self.assessments?[self.categoryIndex].progress ?? 0, animated: false)
        DispatchQueue.main.async {
            self.collectionView.scrollToItem(at: self.questionIndex, at: UICollectionView.ScrollPosition(rawValue: 0), animated: false)
        }
        prgLabel.text = "\(questionIndex.item + 1)" + "/" + String(format: "%d questions", assessments?[categoryIndex].question?.count ?? 0)
        categoryNumberLabel.text = .category + " \(categoryIndex + 1)"
        categoryNameLabel.text = assessments?[categoryIndex].category
        categoryImgView.sd_setImage(with: URL(string: assessments?[categoryIndex].imageUrl ?? "")) { (image, _, _, _) in
            self.categoryImgView.clipsToBounds = false
            self.categoryImgView.image = image
        }
    }
    // MARK: Do something
    func getAssessmentQuestions(value: [Category]?) {
        if (value?.count ?? 1) > 0 {
            assessments = value
        }
        if let array = assessments {
            for (catIndex, catValue) in array.enumerated() {
                for (quesIndex, quests) in catValue.question?.enumerated() ?? [].enumerated() {
                    for value in quests.options ?? [] where value.isSelected ?? false {
                        if quesIndex + 1 == catValue.question?.count {
                            let index = IndexPath(row: 0, section: 0)
                            self.questionIndex = index
                            self.categoryIndex = catIndex + 1
                        } else {
                            self.categoryIndex = catIndex
                            let index = IndexPath(row: quesIndex + 1, section: 0)
                            self.questionIndex = index
                        }
//                        self.isRightSwipe = true
                    }
                }
            }
        }
    }
    func showAlertFor(text: String) {
        hideLoader()
        AppUtils.showBanner(with: text)
    }
    func scoreSend(data: UserData) {
        hideLoader()
        self.removeData()
        AppStateManager.shared.user?.isFirstLogin = data.isFirstLogin
        if let controller = AppUtils.viewController(with: ScoreViewController.identifier) as? ScoreViewController {
            controller.router?.dataStore?.assessmentScore = scoreArray
            appDelegate?.window?.rootViewController = controller
        }
    }
    func getScore(assessment: [Category]?) {
        var score = Int()
        if let data = assessment {
            for index in 0..<data.count {
                if let question = data[index].question {
                    for index in 0..<question.count {
                        if let answer = question[index].options {
                            for obj in answer where obj.isSelected ?? false {
                                score += obj.score ?? 0
                                break
                            }
                        }
                    }
                }
                scoreArray.append(score)
                score = 0
            }
        }
    }
}
extension AssessmentViewController {
    func saveData(data: [Category]?) {
        var tempArray = [[String: Any]]()
        for value in data ?? [] {
            if let dict = try? value.toParams() {
                tempArray.append(dict)
            }
        }
        do {
            let value = try NSKeyedArchiver.archivedData(withRootObject: tempArray, requiringSecureCoding: false)
            guard let context = context else {
                return
            }
            let request = NSFetchRequest<DBAssessments>(entityName: "DBAssessments")
            let assessValue = try? context.fetch(request)
            let objectUpdate = assessValue?[0]
            objectUpdate?.assessmentValue = value as Data
            do {
                try context.save()
            } catch {
                AppUtils.showBanner(with: "Failed saving!!!!")
            }
        } catch {
            print(error)
        }
    }
    func updateData(data: [Category]?) {
        var tempArray = [[String: Any]]()
        for value in data ?? [] {
            if let dict = try? value.toParams() {
                tempArray.append(dict)
            }
        }
        do {
            let value = try NSKeyedArchiver.archivedData(withRootObject: tempArray, requiringSecureCoding: false)
            guard let context = context else {
                return
            }
            let request = NSFetchRequest<DBAssessments>(entityName: "DBAssessments")
            let assessValue = try? context.fetch(request)
            let objectUpdate = assessValue?[0]
            objectUpdate?.assessmentValue = value as Data
            do {
                try context.save()
            } catch {
                AppUtils.showBanner(with: "Failed saving!!!!")
            }
        } catch {
            print(error)
        }
    }
    func removeData() {
        let request = NSFetchRequest<DBAssessments>(entityName: "DBAssessments")
        if let result = try? context?.fetch(request), result.count > 0 {
            let objectToDelete = result[0]
            context?.delete(objectToDelete)
            do {
                try context?.save()
            } catch {
                AppUtils.showBanner(with: "Failed saving!!!!")
            }
        }
    }
}
